	function getHiddenOrders() {
		return JSON.parse(localStorage.getItem("hiddenOrders")) || [];
	}
	// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ ID –≤ localStorage
	function saveHiddenOrders(hiddenOrders) {
		localStorage.setItem("hiddenOrders", JSON.stringify(hiddenOrders));
	}
	
	// –í–∏–≤—ñ–¥ —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è.
	function displayOrdersSummary() {
		const ordersContainer = document.getElementById("ordersSummary");
		ordersContainer.innerHTML = ""; // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–≤—ñ–¥

		if (orderArray.length === 0) {
			ordersContainer.innerHTML = "<p>–ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å</p>";
			return;
		}

		const table = document.createElement("table");
		table.classList.add("show-table");

		const thead = document.createElement("thead");
		thead.classList.add("show");
		thead.innerHTML = `
			<tr>
				<th class="col-number">‚Ññ</th>
				<th class="col-name">–ù–∞–∑–≤–∞</th>
				<th class="col-name">–î–æ–¥–∞—Ç–∫–∏</th>
				<th class="col-price">–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å</th>
				<th class="col-ingrid">–Ü–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∏</th>
				<th class="col-price">–í–∏–∫–æ–Ω–∞–Ω–æ</th>
				<th class="col-additions">–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è</th>
			</tr>
		`;

		table.appendChild(thead);

		const tbody = document.createElement("tbody");

		orderArray.forEach((order, index) => {
			const orderDetails = order.orderDetails;
			let totalCost = 0;
			let allExtras = {};

			Object.values(orderDetails).forEach(orderItem => {
				totalCost += orderItem.cost;
				// –ü—ñ–¥—Å—É–º–æ–≤—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏
			Object.entries(orderItem.extras).forEach(([extra, extraData]) => {
					allExtras[extra] = (allExtras[extra] || 0) + extraData.amount;
				});
			});

			const orderString = Object.entries(orderDetails)
				.map(([name, details]) => `${name} x${details.count}`)
				.join(", ");

			const ingredientsString = Object.entries(order.ingredientsTotal || {})
				.map(([key, value]) => `${key}: ${value}`)
				.join(", ");

			const extrasString = Object.entries(allExtras)
				.map(([key, value]) => `${key}: ${value}–≥`)
				.join(", ");
			

			const extrasDisplay = extrasString.trim() === "" ? "-" : extrasString;
				// –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ
			const orderTr = document.createElement("tr");
			orderTr.classList.add("header-row");
			orderTr.innerHTML = `
				<td class="col-number">‚Ññ${index + 1}</td>
				<td class="col-name">${orderString}</td>
				<td class="col-name">${extrasDisplay}</td>
				<td class="col-price">${totalCost}–≥—Ä–Ω</td>
				<td class="col-ingrid"><p>${ingredientsString}</p></td>
				<td class="col-price">
					<button class="done" data-id="${index + 1}">&#10004;</button>
				</td>
				<td class="col-additions">
					<p>${new Date(order.createdAt).toISOString().slice(0, 19).replace("T", " ")}</p>
				</td>
			`;

			// –î–æ–¥–∞—î–º–æ –ª–æ–≥—ñ–∫—É –¥–ª—è –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
			if (hiddenOrders.includes(index + 1)) {
				orderTr.classList.add("hide");
			}

			tbody.appendChild(orderTr);
		});

		table.appendChild(tbody);
		ordersContainer.appendChild(table);
		
		
		const tfoot = document.createElement("tfoot");
		tfoot.id = "orderSummaryRow"; 
		table.appendChild(tfoot);
		if(orderArray.length == 0){
			ordersContainer.innerHTML = "";
		}
		
	}
	
		// —Ñ—É–Ω–∫—Ü—ñ—è –ø—ñ–¥—Å—É–º–æ–≤—É–≤–∞–Ω—è –Ω–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
	function groupOrders() {
		let orderSummary = {}; // –ü—ñ–¥—Å—É–º–∫–æ–≤–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è

		// –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≤–∏–¥–∏–º—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ç–∞–±–ª–∏—Ü—ñ show-table
		document.querySelectorAll(".show-table tr:not(.hide) .col-name").forEach(cell => {
			let orderText = cell.textContent.trim();
			
			// –†–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ –æ–∫—Ä–µ–º—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ (name x –∫—ñ–ª—å–∫—ñ—Å—Ç—å) –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –ø–æ –∫–æ–º—ñ
			let items = orderText.split(",").map(item => item.trim()); // –û–∫—Ä–µ–º—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏
			items.forEach(item => {
				let matches = item.match(/(.+?)\s*x(\d+)/);

				if (matches) {
					let name = matches[1].trim();
					let count = parseInt(matches[2]);

					// –Ø–∫—â–æ —Ü–µ–π —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç –≤–∂–µ —î –≤ –ø—ñ–¥—Å—É–º–∫—É, –¥–æ–¥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —è–∫—â–æ –Ω—ñ ‚Äî —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ
					if (orderSummary[name]) {
						orderSummary[name] += count;
					} else {
						orderSummary[name] = count;
					}
				}
			});
		});

		
		// –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤—ñ –¥–∞–Ω—ñ —É —Ä—è–¥–æ–∫
		let summaryString = Object.entries(orderSummary)
			.map(([name, count]) => {
				// –ü—ñ–¥—Å–≤—ñ—á—É—î–º–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–ª–∞—Å—ñ–≤
				let className = "";
				if (count >= 5) {
					className = "high-count"; // –î–ª—è x5 —ñ –±—ñ–ª—å—à–µ
				} else if (count >= 2) {
					className = "medium-count"; // –î–ª—è x2 –¥–æ x4
				}else if (count >= 0) {
					className = "low-count"; // –î–ª—è x0 –¥–æ x2
				}

				return `<span class="${className}">${name} x${count} </span>`;
			})
			.join(", ");

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Ä—è–¥–æ–∫
		let summaryElement = document.getElementById("orderSummaryRow");

		if (!summaryElement) {
			// –Ø–∫—â–æ –Ω–µ–º–∞—î ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Ä—è–¥–æ–∫
			summaryElement = document.createElement("div");
			summaryElement.id = "orderSummaryRow";
			summaryElement.classList.add("order-summary");
			summaryElement.innerHTML = `
				<p></p>
			`;
			//üìå –ü—ñ–¥—Å—É–º–æ–∫: ${summaryString} –∑–∞–ª–∏—à–∞—é –Ω–∞ –º–∞–π–±—É—Ç–Ω—î –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ
			// –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ordersSummary
			const ordersContainer = document.getElementById("ordersSummary");
			ordersContainer.appendChild(summaryElement);
		} else {
			// –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –ø—ñ–¥—Å—É–º–æ–∫
			summaryElement.innerHTML = `<p>  ${summaryString}</p>`;
		}
	}

	
	document.addEventListener("click", (event) => {
	  if (event.target.classList.contains("done")) {
		const orderId = event.target.getAttribute("data-id"); // –û—Ç—Ä–∏–º—É—î–º–æ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
		const row = event.target.closest("tr"); // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π <tr>

		if (row) {
		  // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó (–∑–º–µ–Ω—à–µ–Ω–Ω—è –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ)
		  row.classList.add("opacityShowRow");

		  // –î–æ—á–µ–∫–∞—î–º–æ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –ø–µ—Ä–µ–¥ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è–º
		  setTimeout(() => {
			row.classList.add("hide"); // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤–µ—Å—å —Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
		  }, 500); // –ó–∞—Ç—Ä–∏–º–∫–∞ –Ω–∞ 500 –º—Å (—á–µ–∫–∞—î–º–æ –ø–æ–∫–∏ –∞–Ω—ñ–º–∞—Ü—ñ—è –∑–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è)

		  // –î–æ–¥–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö, —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î
		  if (!hiddenOrders.includes(parseInt(orderId))) {
			hiddenOrders.push(parseInt(orderId));
		  }

		  localStorage.setItem("hiddenOrders", JSON.stringify(hiddenOrders)); // –û–Ω–æ–≤–ª—é—î–º–æ localStorage
		  setTimeout(() => { groupOrders();}, 500); // –û–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤—É —Ç–∞–±–ª–∏—Ü—é
		}
	  }

	});

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
	document.addEventListener("DOMContentLoaded", () => {
	  let hiddenOrders = getHiddenOrders();
	  hiddenOrders.forEach(orderId => {
		const row = document.querySelector(`.done[data-id="${orderId}"]`)?.closest("tr");
		if (row) {
		  // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó (–∑–º–µ–Ω—à–µ–Ω–Ω—è –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ)
		  row.classList.add("opacityShowRow");

		  // –î–æ—á–µ–∫–∞—î–º–æ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –ø–µ—Ä–µ–¥ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è–º
		  setTimeout(() => {
			row.classList.add("hide"); // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤–µ—Å—å —Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
		  }, 500); // –ó–∞—Ç—Ä–∏–º–∫–∞ –Ω–∞ 500 –º—Å
		}
	  });

	  groupOrders(); // –û–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤—É —Ç–∞–±–ª–∏—Ü—é
	});
	
	// –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
	displayOrdersSummary();